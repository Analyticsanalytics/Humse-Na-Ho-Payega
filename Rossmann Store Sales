
#######################LINEAR REGRESSION-----SCORE 62%  ################

library(readr) #readr makes it easier to read and write heavy files
train = read_csv(file = "C:\\Users\\admin\\Desktop\\Kaggle Competition\\Rossman\\train.csv")
test = read_csv(file = "C:\\Users\\admin\\Desktop\\Kaggle Competition\\Rossman\\test.csv")
store = read_csv(file = "C:\\Users\\admin\\Desktop\\Kaggle Competition\\Rossman\\store.csv")

#Removing the Customer variable from trainset since it's not there in test set
train$Customers = NULL

#Merging the training and testing set that with the store dataset
mtrain = merge(train, store)
mtest = merge(test, store)

#NO. of missiing values
length(mtrain[is.na(mtrain)])
length(mtest[is.na(mtest)])

# There are some missing  values (NA)in integar columns. Converting these values to zero. 
mtrain[is.na(mtrain)] = 0
mtest[is.na(mtest)] = 0


# seperating out the elements of the date column for the train set
mtrain$Date= as.Date.factor(mtrain$Date,"%Y-%m-%d")
mtrain$month = as.integer(format(mtrain$Date, "%m"))
mtrain$year = as.integer(format(mtrain$Date, "%y"))
mtrain$day = as.integer(format(mtrain$Date, "%d"))

mtrain$Date = NULL     # removing the date column since elements are extracted

#Same treatment for test set data
mtrain$Date= as.Date.factor(mtrain$Date,"%Y-%m-%d")
mtest$month = as.integer(format(mtest$Date, "%m"))
mtest$year = as.integer(format(mtest$Date, "%y"))
mtest$day = as.integer(format(mtest$Date, "%d"))
mtest$Date = NULL


#model.matrix creates a design matrix from the description given in terms(object).Any character variables are 
#coerced to binary (0 or 1) by creating new variables. We're using it here to convert charac variable into binary vectors
library(Metrics)
options(na.action="na.pass") #It will also include NA & blank values in the matrix, else they will be erased from matrix upon conversion
mtrain = model.matrix(~.,mtrain)

#Making data frame of the matrix
mtrain = as.data.frame(mtrain)

#Same treatment for test set
mtest = model.matrix(~.,mtest)
mtest = as.data.frame(mtest)


#Removng the 1st column which is Intercept created due to dataframe
mtrain = mtrain[,c(-1)]
mtest = mtest[,c(-1)]

#Making the linear Model
RG1 = lm(Sales ~ ., data = mtrain)
PredTest = predict(RG1, newdata = mtest)
submission = data.frame(Id = test$Id, Sales = PredTest)
write_csv(submission, "Reg1.csv",)


########      LINEAR REGRESSION WITH IMPUTATION--------SCORE--73%  #######################

library(readr)

#Laoding the train, test and store dataset
#Removing the CUstomer variables from train since it's not there in test set
#Merging the training and testing set that with the store dataset and call em mtrain & mtest
# Converting NA values to zero in training and testing set
# seperating out the elements of the date column for the train set
# removing the date column (since elements are extracted) and also StateHoliday which has a lot of NAs (may add it back in later)
# seperating out the elements of the date column for the test set
# removing the date column (since elements are extracted) 


# imputation to the mean since there are so many zero values(assuming 0 is missing value and not actual zero)
mtrain$CompetitionOpenSinceMonth[mtrain$CompetitionOpenSinceMonth==0] = mean(mtrain$CompetitionOpenSinceMonth, na.rm=TRUE)
mtrain$CompetitionOpenSinceYear[mtrain$CompetitionOpenSinceYear==0] = mean(mtrain$CompetitionOpenSinceYear, na.rm=TRUE)
mtrain$Promo2SinceWeek[mtrain$Promo2SinceWeek==0] = mean(mtrain$Promo2SinceWeek, na.rm=TRUE)
mtrain$Promo2SinceYear[mtrain$Promo2SinceYear==0] = mean(mtrain$Promo2SinceYear, na.rm=TRUE)

#Imputation to the mean for test set as well
mtest$CompetitionOpenSinceMonth[mtest$CompetitionOpenSinceMonth==0] = mean(mtest$CompetitionOpenSinceMonth, na.rm=TRUE)
mtest$CompetitionOpenSinceYear[mtest$CompetitionOpenSinceYear==0] = mean(mtest$CompetitionOpenSinceYear, na.rm=TRUE)
mtest$Promo2SinceWeek[mtest$Promo2SinceWeek==0] = mean(mtest$Promo2SinceWeek, na.rm=TRUE)
mtest$Promo2SinceYear[mtest$Promo2SinceYear==0] = mean(mtest$Promo2SinceYear, na.rm=TRUE)


library(Metrics)
options(na.action="na.pass")
mtrain = model.matrix(~.,mtrain)
mtrain = as.data.frame(mtrain)

mtest = model.matrix(~.,mtest)
mtrain = as.data.frame(mtest)


Reg2 = lm(Sales ~ ., data = mtrain)
PredTest = predict(Reg2, newdata = mtest)
submission = data.frame(Id = test$Id, Sales = PredTest)
write_csv(submission, "Reg2.csv",)



################       RANDOM FOREST     SCORE--66%      #############################################
#Removng the 1st column which is Intercept created due to dataframe

#Deleting some fo the variables which randomForest is unable to accommodate
mtrain = mtrain[, -c(19:21)]
mtest = mtest[, -c(19:21)]


library(randomForest)
RF2 = randomForest(Sales ~ ., data = mtrain, ntree=170, imp=TRUE, sampsize=10000, do.trace=TRUE)
PredTest = predict(RF2, newdata = mtest)
submission = data.frame(Id = test$Id, Sales = PredTest)
write_csv(submission, "RF2.csv",)


################ RANDOM FOREST    SCORE-67%        #######################################

Instead of deleting some variables which RF is unable to read, lets change their names so that R could read em
colnames(mtrain)[19:21] = c("LOL","ROL", "COL")
colnames(mtest)[19:21] = c("LOL","ROL", "COL")


library(randomForest)
RossForesr = randomForest(Sales ~ ., data = mtrain, ntree=500, nodesize=50)
PredTest = predict(RossForesr, newdata = mtest)




######### COMBINING ALL THE DATASETS, RUN THE IMPUTATION, SEPARATE THEM AND THEN MAKE THE MODEL   #######################
                SCORE-- 65.4%


train = read.csv(file = "F:\\Desktop1\\Padhai Likhai\\Kaggle Competition\\Rossman\\train.csv", stringsAsFactors = FALSE, na.strings="")
test = read.csv(file = "F:\\Desktop1\\Padhai Likhai\\Kaggle Competition\\Rossman\\test.csv", stringsAsFactors = FALSE, na.strings="")
store = read.csv(file = "F:\\Desktop1\\Padhai Likhai\\Kaggle Competition\\Rossman\\store.csv", stringsAsFactors = FALSE, na.strings="")

#combining the train & test set, and then merging the store set
names(train)
names(test)
train$Customers = NULL
train$Id = rep(0,nrow(train)) #Creating dummy variable in train
test$Sales = rep(0,nrow(test)) #creating a Sales dummy variable in test so that combining is possible
data = rbind(train, test)

dataset = merge(data, store)

dataset$Date= as.Date.factor(dataset$Date,"%Y-%m-%d")
dataset$month = as.integer(format(dataset$Date, "%m"))
dataset$year = as.integer(format(dataset$Date, "%y"))
dataset$day = as.integer(format(dataset$Date, "%d"))

# removing the date column since elements are extracted
dataset$Date = NULL


library(Metrics)
options(na.action="na.pass") #It will also include NA & blank values in the matrix, else they will be erased from matrix upon conversion
dataset = model.matrix(~.,dataset)
dataset = as.data.frame(dataset)

#Removing the 1st column which is intercept
dataset = dataset[,c(-1)]
names(dataset)

#Column 22 & 23 has confusing names. CHanging it.
colnames(dataset)[22:23] = c("LOL","ROL")

M <- sapply(dataset, function(x) sum(is.na(x))) #Making a list M of variables with missing values
M[M>0]    #Getting the variables which have NA values greater than zero

#Setting the NA values to zero on the assumption that they're missing values and not actual values, then we'll impute them
dataset[is.na(dataset)] = 0

dataset$CompetitionOpenSinceMonth[dataset$CompetitionOpenSinceMonth==0] = mean(dataset$CompetitionOpenSinceMonth, na.rm=TRUE)
dataset$CompetitionOpenSinceYear[dataset$CompetitionOpenSinceYear==0] = mean(dataset$CompetitionOpenSinceYear, na.rm=TRUE)
dataset$Promo2SinceWeek[dataset$Promo2SinceWeek==0] = mean(dataset$Promo2SinceWeek, na.rm=TRUE)
dataset$Promo2SinceYear[dataset$Promo2SinceYear==0] = mean(dataset$Promo2SinceYear, na.rm=TRUE)
dataset$CompetitionDistance[dataset$CompetitionDistancer==0] = mean(dataset$CompetitionDistance, na.rm=TRUE)
dataset$LOL[dataset$LOL==0] = mean(dataset$LOL, na.rm=TRUE)
dataset$ROL[dataset$ROL==0] = mean(dataset$ROL, na.rm=TRUE)
dataset$Open[dataset$Open==0] = mean(dataset$Open, na.rm=TRUE)


#Separating the data into training and test set
mtrain <- dataset[dataset$Id==0,]
mtest <- dataset[dataset$Id > 0,]
mtrain$Id = NULL    #Deleting the dummy variable Id
mtest$Sales = NULL   # Deleting the dummy variable sales

M1 <- sapply(mtrain, function(x) sum(is.na(x)))
M1[M1>0]    


#Making the linear Model
RG1 = lm(Sales ~ ., data = mtrain)
PredTest = predict(RG1, newdata = mtest)
submission = data.frame(Id = test$Id, Sales = PredTest)
library(readr)
write_csv(submission, "Reg1.csv",)





#############      SUMIT SCRIPT- SCORE 70%   ###########################

# Sumit Script

train = read.csv(file = "train.csv", stringsAsFactors = FALSE, na.strings="")
test = read.csv(file = "test.csv", stringsAsFactors = FALSE, na.strings="")
store = read.csv(file = "store.csv", stringsAsFactors = FALSE, na.strings="")

train1 <- train #Copying the datasets in a new dataframe
test1 <- test
store1 <- store

holidays <- as.Date(c('2013-01-01','2013-01-06', '2013-03-29','2013-04-01','2013-05-01',
                      '2013-05-09','2013-05-20','2013-05-30','2013-10-03','2013-10-31','2013-11-01',
                      '2013-12-25','2013-12-26', '2014-01-01','2014-01-06','2014-03-18','2014-04-21',
                      '2014-05-01','2014-05-29','2014-06-09','2014-06-19','2014-10-03','2014-10-31',
                      '2014-11-01','2014-12-25','2014-12-26','2015-01-01','2015-01-06','2015-04-03',
                      '2015-04-06','2015-05-01','2015-05-14','2015-05-25','2015-06-04'))
for(i in 1:34){
  
  train1 <- within(train1, StateHoliday[Date==holidays[i]] <- 1)
}

# Check for na
temp <- sapply(train1, function(x) sum(is.na(x)))
temp[temp>0]

test1$Open[is.na(test1$Open)]<- 1

# To check missing competition distance
temp <- subset(store1, is.na(CompetitionOpenSinceMonth))

store1$CompetitionDistance[is.na(store1$CompetitionDistance)] = mean(store1$CompetitionDistance, na.rm=TRUE)
store1$CompetitionOpenSinceMonth[is.na(store1$CompetitionOpenSinceMonth)] = 
  mean(store1$CompetitionOpenSinceMonth, na.rm=TRUE)

store1$CompetitionOpenSinceYear[is.na(store1$CompetitionOpenSinceYear)] = 2010
store1$Promo2SinceWeek[is.na(store1$Promo2SinceWeek)] = 22
store1$Promo2SinceYear[is.na(store1$Promo2SinceYear)] = 2012

store1$PromoIntCode <- ifelse(store1$PromoInterval=="Jan,Apr,Jul,Oct", 1, 
                              ifelse(store1$PromoInterval=="Feb,May,Aug,Nov",2,
                                     ifelse(store1$PromoInterval=="Mar,Jun,Sept,Dec",3,0
                                     )))

store1$PromoIntCode[is.na(store1$PromoIntCode)] = 0
store1$PromoInterval <- NULL

train1$StateHoliday <- as.integer(train1$StateHoliday)
test1$StateHoliday <- as.integer(test1$StateHoliday)

train1$StateHoliday[is.na(train1$StateHoliday)] = 0
test1$StateHoliday[is.na(test1$StateHoliday)] = 0

train1$week<- strftime(as.POSIXlt(train1$Date),format="%W")
test1$week<- strftime(as.POSIXlt(test1$Date),format="%W")

train1$week <- as.integer(train1$week)
test1$week <- as.integer(test1$week)

train1$year<- strftime(as.POSIXlt(train1$Date),format="%Y")
test1$year<- strftime(as.POSIXlt(test1$Date),format="%Y")
train1$year <- as.integer(train1$year)
test1$year <- as.integer(test1$year)

mtrain <- merge(train1, store1)
mtest <- merge(test1, store1)

mtrain$Store = as.factor(mtrain$Store)
mtrain$DayOfWeek = as.factor(mtrain$DayOfWeek)
mtrain$week = as.factor(mtrain$week)
mtrain$year = as.factor(mtrain$year)
mtrain$StoreType = as.factor(mtrain$StoreType)
mtrain$Assortment = as.factor(mtrain$Assortment)
mtrain$CompetitionOpenSinceMonth = as.factor(mtrain$CompetitionOpenSinceMonth)
mtrain$CompetitionOpenSinceYear = as.factor(mtrain$CompetitionOpenSinceYear)
mtrain$Promo2SinceWeek = as.factor(mtrain$Promo2SinceWeek)
mtrain$Promo2SinceYear = as.factor(mtrain$Promo2SinceYear)
mtrain$PromoIntCode = as.factor(mtrain$PromoIntCode)

mtest$Store = as.factor(mtest$Store)
mtest$DayOfWeek = as.factor(mtest$DayOfWeek)
mtest$week = as.factor(mtest$week)
mtest$year = as.factor(mtest$year)
mtest$StoreType = as.factor(mtest$StoreType)
mtest$Assortment = as.factor(mtest$Assortment)
mtest$CompetitionOpenSinceMonth = as.factor(mtest$CompetitionOpenSinceMonth)
mtest$CompetitionOpenSinceYear = as.factor(mtest$CompetitionOpenSinceYear)
mtest$Promo2SinceWeek = as.factor(mtest$Promo2SinceWeek)
mtest$Promo2SinceYear = as.factor(mtest$Promo2SinceYear)
mtest$PromoIntCode = as.factor(mtest$PromoIntCode)

reg = lm(Sales ~ Store + DayOfWeek + Open + Promo + StateHoliday + SchoolHoliday
         + week
         + year
         + StoreType
         + Assortment
         + CompetitionDistance
         + CompetitionOpenSinceMonth:
         + CompetitionOpenSinceYear
         + Promo2
         + Promo2SinceWeek
         + Promo2SinceYear
         + PromoIntCode
         ,data = mtrain)






