

################## RMSLE Score ### 0.14974
rm(list = ls())
getwd()
setwd("/home/lebowski/Desktop/Kaggle/House Prices: AR")

train = read.csv("train.csv")
test = read.csv("test.csv")

sapply(train, function(x) class(x))
names(train)[1:3]

# Combine the train and test set to understand the data
table(train$SalePrice >0) #All the sale prices are greater than zero. 
test$SalePrice = 0  # We can get test set later on using saleprice zero condition
df = rbind(train,test)

#CHecking the missing values. There are so many missing values
colSums(is.na(df))
df$PoolQC = NULL
df$MiscFeature = NULL
df$Alley = NULL
df$Fence = NULL
df$FireplaceQu = NULL

MM = (colSums(is.na(df)))
MM1 = MM[MM>5]
names(MM1)

library(mice)
imputeData = df[, c("LotFrontage", "MasVnrType", "MasVnrArea", "BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1",
                    "BsmtFinType2", "GarageType", "GarageYrBlt",  "GarageFinish", "GarageQual", "GarageCond")]
imputed = complete(mice(imputeData))

df[, c("LotFrontage", "MasVnrType", "MasVnrArea", "BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1",
             "BsmtFinType2", "GarageType", "GarageYrBlt",  "GarageFinish", "GarageQual", "GarageCond")] = NULL
df1 =cbind(df,imputed)
sort(colSums(is.na(df1)))

NN = colSums(is.na(df1))
NN1 = NN[NN>0]
names(NN1)

ImputedData1 = df1[, c("MSZoning","Utilities","Exterior1st","Exterior2nd","BsmtFinSF1","BsmtFinSF2","BsmtUnfSF","TotalBsmtSF", 
         "Electrical","BsmtFullBath","BsmtHalfBath","KitchenQual","Functional","GarageCars","GarageArea","SaleType")]

imputed1 = complete(mice(ImputedData1))

df1[, c("MSZoning","Utilities","Exterior1st","Exterior2nd","BsmtFinSF1","BsmtFinSF2","BsmtUnfSF","TotalBsmtSF", 
        "Electrical","BsmtFullBath","BsmtHalfBath","KitchenQual","Functional","GarageCars","GarageArea","SaleType")] = NULL
df2 = cbind(df1, imputed1)

train = NULL
test = NULL
df1 = NULL
df = NULL
imputed = NULL
imputeData = NULL
ImputedData1 = NULL
train = df2[1:1460, ]
test = df2[1461:2919,]

Id = test$Id
test$Id = NULL
test$SalePrice = NULL
class(train$SalePrice)

#start random forest
library(randomForest)
rffit = randomForest(SalePrice ~ .,train,ntree=120, imp=TRUE, sampsize=1000, do.trace=TRUE)

submission = data.frame(Id)
submission$SalePrice = predict(rffit, test)
write.csv(submission, "submit_rf1.csv", row.names=FALSE)
          
############################    RMLSE SCORE: 0.15480   ##########################################################          
####################     Factor analysis: Use these Factors & other Vars For RF:    ########################
################################################################################################################

After 2nd imputation done on rest of the vars with missing values in above steps, save it as imputedData.csv

write.csv(df2, "imputedData.csv", row.names = FALSE)


 #1st we need to take a subset of numerical values
df2 = read.csv("imputedData.csv")

df_num <- df2[sapply(df2,is.numeric)]
dfId = df2[, c("Id", "SalePrice")]
df_num$Id = NULL
df_num$SalePrice = NULL

pcap <- function(x){
  for (i in which(sapply(x, is.numeric))) {
    quantiles <- quantile( x[,i], c(.05, .95 ), na.rm =TRUE)
    x[,i] = ifelse(x[,i] < quantiles[1] , quantiles[1], x[,i])
    x[,i] = ifelse(x[,i] > quantiles[2] , quantiles[2], x[,i])}
  x
}

dff = pcap(df_num) #df1 will have no outliers.

colSums(is.na(dff))
############  Using factor analysis to create factors for numerical variables

dff$LowQualFinSF = NULL
dff$KitchenAbvGr = NULL
dff$X3SsnPorch = NULL
dff$PoolArea = NULL
dff$MiscVal = NULL

# We need to take total of 10  factors for factor analysis
set.seed(10)
library(psych)
library(nFactors)
dim(dff)
evs = eigen(cor(dff)) 
evs$values


fit1 = factanal(dff, factors = 10, rotation = "varimax", scores="regression", control=list(lower=0.000000006))
summary(fit1$loadings)

print(loadings(fit1), digits=2, cutoff=.2, sort=TRUE) 
names(fit1)
summary(fit1)

#We can add the scores in original set and use em (instead of originial variables) for modelling
table(sapply(df2, function(x) class(x)))
df_fac <- df2[sapply(df2,is.factor)]

df_final = cbind(dfId, df_fac, fit1$scores)
names(df_final)
train = df2[1:1460, ]
test = df2[1461:2919,]

Id = test$Id
train$Id = NULL
test$Id = NULL

#start random forest
library(randomForest)
rffit = randomForest(SalePrice ~ .,train,ntree=100, imp=TRUE, sampsize=500, do.trace=TRUE)


submission = data.frame(Id)
submission$SalePrice = predict(rffit, test)
write.csv(submission, "submit_rfff.csv", row.names=FALSE)


